name: BOT

on:
  issues:
    types:
      - opened
  issue_comment:
    types:
      - created

jobs:
  bot:
    runs-on: ubuntu-latest
    if: contains(github.event.comment.body || github.event.issue.body, '/copilot-ops')
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v3
        with:
          go-version: 1.18
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - run: go build
      - uses: actions/github-script@v6
        with:
          script: |
            let reply = '';
            const body = 
              context?.payload?.comment?.body || 
              context?.payload?.issue?.body;

            for (const line in body.split('\n')) {
              if (!/^\s*\/copilot-ops\s*/.test(line)) continue;
              console.log('found command line:', line);

              // extracting args from the command line:
              const args = [];
              const re = /\s*(?:"((?:\\.|[^"])*)"|((?:\\.|[^"\s])+))\s*/y;
              while (re.lastIndex !== line.length) {
                const m = re.exec(line);
                if (!m) {
                  args.length = 0;
                  break;
                }
                args.push((m[1] || m[2] || '').replace(/\\(.)/g, '$1'));
              }

              if (!args.length) {
                console.log('failed to parse args:', line);
                reply += '\n### failed: `' + line + '`\n';
                continue;
              }

              // executing command with args
              try {
                console.log('exec with args:', args);
                if (reply) reply += '\n\n---\n\n';
                reply += '\n### exec: `' + JSON.stringify(args) + '`\n';
                const { stdout, stderr } = await exec.getExecOutput('./copilot-ops', args.slice(1));
                console.log('stdout:', stdout);
                console.log('stderr:', stderr);
                reply += '\n### stdout:' + '\n```\n' + stdout + '\n```\n';
                reply += '\n### stderr:' + '\n```\n' + stderr + '\n```\n';
              } catch (err) {
                console.log('exec failed:', err);
                reply += '\n### error:' + '\n```\n' + err.stack + '\n```\n';
              }
            }

            if (reply) {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: reply,
              });
            }
